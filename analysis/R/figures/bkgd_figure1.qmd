---
title: "Background for Figures 1b and 1c"
author: "Lauren Zamora"
format: html
editor: visual
---

For **Figures 1b and 1c** first load the following libraries:

```{r}
library(data.table)
library(mgcv)
```

Specify the bin sizes and meteorological parameters to plot by:

```{r}
merTrange<-seq(-70,30,7.5/2)
merQVrange<-seq(0,0.0145, 0.001) 
temprange<-seq(-70,30,7.5/2)

var1range<-merTrange
var2range<-temprange
var3range<-merQVrange
var1<-"merT"
var2<-"temp"
var3<-"merQV"

```

Specify that we are going to use FLEXPART dust as the aerosol type for determining background conditions, and the FLEXPART dust background cutoff in ng/m3:

```{r}
atypes<-c("fdust")
fdustcutoff<- 93 
acutoff<-c(fdustcutoff)
i=1
a1name<-atypes[i]
b1<-acutoff[i]
```

Set the altitude in km, j, of the data we want to plot:

```{r}
j<-3
```

Specify quality control variables. We focused the analysis on those meteorological bins where there were at least 40 (min) cloud observations in both background and non-background conditions. We also focused on bins where there were at least 5 (min4) unique days of observations to minimize any potential autocorrelation resulting from many observations being taken from the same cloud:

```{r}
min<-40
min4<-5
```

Now for **Figure 1b**,

Load the data.

```{r}
eval(parse(t=paste0(" load('../../data/derived_data/lev",j,"_v4c.RData')")))
```

Set the conditions for determining the subset of interest (over ocean, over sea ice) and only look at data within those conditions:

```{r}
conditions <- "ocean==1&seaice>=0.9"
eval(parse(t=paste0("la3<-lev",j,"[",conditions,"]")))
```

Clean up the data a bit by changing cloud phase (CP) values to NA if they are undetermined or uncertain, changing the altitude layer to a numeric value, and cleaning up the sea ice data

```{r}
la3$CP[la3$CP==0]<-NA  #Values are either 1 (ice), 2 (mixed phase), 3 (liquid), or 0 (undetermined). Convert undetermined to NA.
la3$CP[la3$CPqf==1]<-NA #convert CP values that are uncertain to NAs. 
la3$alt_layer<-as.numeric(la3$alt_layer)
la3[seaice>1, seaice:=NA]  #NSIDC sea ice values are from 0 to 1. Higher values indicate quality flags.
```

Add some new variables to the data set. Add, for every observation, which meteorological bin the observation was in, if the air and cloud observation was or was not in background dust conditions, and the glaciation state of any observed cloud:

```{r}
	la3[, a1:=.SD, .SDcols=a1name]  #The value of aerosol tracer of interest in the given meteorological bin
	la3[,var1bin:=findInterval(eval(parse(t=paste0(var1))),var1range)]
	la3[,var2bin:=findInterval(eval(parse(t=paste0(var2))),var2range)]
	la3[,var3bin:=findInterval(eval(parse(t=paste0(var3))),var3range)]
	la3[,test.this:=as.numeric(!(is.na(conv)))] #is there (1) or is there not (0) any kind of cloud?
	la3[,all:=ifelse(!is.na(a1),1,0)]
	la3[,clean:=ifelse(a1<b1,1,0)]
	la3[,notclean:=ifelse(a1>=b1,1,0)]
	la3[,cleancloud:=ifelse(clean==1&test.this==1,1,0)]
	la3[,notcleancloud:=ifelse(notclean==1&test.this==1,1,0)]
	la3[,fi:=(1 - ((CP-1)/2))*100] #glaciation
```

Add some new variables to the data set that listed at every observation, but that show the sum, sample number, or mean of the variable within that observation's meteorological bin as defined by the 3 variables. For every observation, add relevant information about the characteristics of the meteorological bin it belonged to:

```{r}
	la3[,alln:=sum(all,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of aerosol observations in the meteorological bin
	la3[,cleann:=sum(clean,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of times aerosol conditons are clean in the meteorological bin
	la3[,notcleann:=sum(notclean,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of times aerosol conditions are not clean in the meteorological bin
	la3[,cleanncloud:=sum(cleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number clean clouds in the meteorological bin
	la3[,notcleanncloud:=sum(notcleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of not clean clouds in the meteorological bin
	la3[,uniccf:=length(unique(date[clean==1])), by=.(var1bin,var2bin,var3bin)] #unique clean days in each meteorological bin
	la3[,unic:=length(unique(date[cleancloud==1])),by=.(var1bin,var2bin,var3bin)] #unique days with clean clouds in the meteorological bin
	la3[,uniacf:=length(unique(date[notclean==1])),by=.(var1bin,var2bin,var3bin)] #unique non clean days in the meteorological bin
	la3[,unia:=length(unique(date[notcleancloud==1])),by=.(var1bin,var2bin,var3bin)] #unique days with non clean clouds in the meteorological bin
	la3[,dfi:=mean(fi[test.this==1], na.rm=T)-mean(fi[cleancloud==1], na.rm=T), by=.(var1bin,var2bin,var3bin)]# the glaciation difference between all and background clouds in the meteorological bin 
```

Group mean difference in cloud glaciation (dfi) and thickness (dCth) into meteorological bins and get sample number (alln) within the bins for cases that satisfy the quality control elements . Then fill out the grid, adding NAs to any empty bins for the two variables the plot will be flattened onto. In this case, var1 is MERRA-2 T and var3 is MERRA-2 Qv:

```{r}
del1<-la3[unic>=min4&unia>=min4&cleanncloud>=min & notcleanncloud>=min , 
		.(
		dfi=mean(fi[test.this==1],na.rm=T)-mean(fi[cleancloud==1], na.rm=T),
		dCth=mean(th[test.this==1], na.rm=T)-mean(th[cleancloud==1], na.rm=T),
		alln=sum(test.this,na.rm=T)
		) ,
		by=.(var1bin, var2bin, var3bin)] 	
		
 setDT(del1)
 
del2<-expand.grid(var1bin=min(del1$var1bin,na.rm=T):max(del1$var1bin,na.rm=T),var3bin=min(del1$var3bin,na.rm=T):max(del1$var3bin,na.rm=T),dfi=NA,dCth=NA,alln=NA,var2bin=NA) 
del2<-rbind(del1,del2)
```

Find which of the differences in cloud glaciation in each meteorological bin are significant (p \<0.05) using a Wilcoxon rank test. As before, fill out the grid, adding NAs to any empty bins for the two variables the plot will be flattened onto:

```{r}
del1p<-la3[unic>=min4&unia>=min4&cleanncloud>=min & notcleanncloud>=min , 
		.(
		dfip=as.numeric(try(wilcox.test(fi[test.this==1],fi[cleancloud==1])$p.value)),
		dCthp=as.numeric(try(wilcox.test(th[test.this==1], th[cleancloud==1])$p.value))
				) ,
		by=.(var1bin,var3bin)] 
# Add in the missing bins for plotting purposess
del2p<-expand.grid(var1bin=min(del1p$var1bin,na.rm=T):max(del1p$var1bin,na.rm=T),var3bin=min(del1p$var3bin,na.rm=T):max(del1p$var3bin,na.rm=T),dfip=NA,dCthp=NA)
del2p<-rbind(del1p,del2p)
```

Add in the actual values of the bins for reference:

```{r}
del2[,merT:=var1range[var1bin]]
del2[,temp:=var2range[var2bin]]
del2[,merQV:=var3range[var3bin]]

```

Remove rows in the data set where there are no data for variables 1 and 3 (which are the two variables we will plot the 2-D data on). In this case variable 1 is MERRA-2 temperature, and variable 3 is MERRA-2 specific humidity.

```{r}
del2<-del2[!is.na(del2$var1bin),]
del2<-del2[!is.na(del2$var3bin),]
del2p<-del2p[!is.na(del2p$var1bin),]
del2p<-del2p[!is.na(del2p$var3bin),]

```

Average across all AIRS T bins, so that we have a new 2D data set for MERRA-2 temperature and Qv bins that includes the weighted mean of the change in glaciation, weighted by sample number in the bin.

```{r}
test<-del2[, weighted.mean(dfi,alln,na.rm=T), by=.(var1bin,var3bin)][, dcast(.SD, var1bin~var3bin)]    
grid2<-as.matrix(test)[,-1]

testp<-dcast(del2p, var1bin~var3bin,value.var='dfip',fun=mean,na.rm=T,fill=NA) #this will cause trouble if there is more than 1 real value, but there shouldn't be.
grid2p<-as.matrix(testp)[,-1]
```

Get grid point sizes:

```{r}
test3<-dcast(del2, var1bin~var3bin,value.var='alln',fun=sum,fill=NA, na.rm=T) 
gridn<-as.matrix(test3)[,-1]
sizegrid<-gridn/max(gridn,na.rm=T)*4.5
```

Add column and row names.

```{r}
xmin<-min(del2$var1bin,na.rm=T)
xmax<-max(del2$var1bin,na.rm=T) 
ymin<-min(del2$var3bin,na.rm=T) 
ymax<-max(del2$var3bin,na.rm=T) 
xax<-var1range[xmin:xmax] + (var1range[2]-var1range[1])/2  #Because findInterval gives low interval boundary
yax<-var3range[ymin:ymax]+ (var3range[2]-var3range[1])/2  #Because findInterval gives low interval boundary

eval(parse(t=paste0("colnames(del2)<-c('",var1,"bin', '",var2,"bin', '",var3,"bin', 'dglaciation', 'dcloud_thickness', 'n',  '",var1,"', '",var2,"', '",var3,"')")))

colnames(grid2)<-paste0("QV", yax) #Mid-point of Qv bin
rownames(grid2)<-paste0("merT", xax) #Mid-point of merT bin

colnames(grid2p)<-paste0("QV", yax) #Mid-point of Qv bin
rownames(grid2p)<-paste0("merT", xax) #Mid-point of merT bin

colnames(sizegrid)<-paste0("QV", yax) #Mid-point of Qv bin
rownames(sizegrid)<-paste0("merT", xax) #Mid-point of merT bin
```

Save the files needed to plot **Figure 1b**.

```{r}
write.csv(del2, file="../../data/derived_data/del2.csv")
write.csv(grid2, file="../../data/derived_data/grid2.csv")
write.csv(grid2p, file="../../data/derived_data/grid2p.csv")
write.csv(sizegrid, file="../../data/derived_data/sizegrid.csv")
rm(la3)
```

Now for **Figure 1c**,

Make list of all the names of the different meteorological and aerosol variables that we want to assess to see how predictive they are of the change in glaciation. Make another list of the meteorological variables only.

```{r}
groups<-c("Etemp", "merT", "temp","omega",  "aLTS","ERH", "merRH","aRH", "XRHi", "merwindspeed","merQV", "fdust","SO4","merBC","merOC","merdust","fBC","fOC","DMS","SS")
groups1<-c("Etemp", "merT", "temp","omega",  "aLTS","ERH", "merRH","aRH", "XRHi", "merwindspeed","merQV") 
```

Add an additional quality control variable. Each meteorological bin had at least 5 different 400 km2 grids cells with non-zero changes in cloud glaciation. This third criterion made it easier to focus on cases when co-varying meteorology did not already capture the observed variability.

```{r}
minj<-5
```

Set new conditions for determining the subset of interest (over ocean, over sea ice) and only look at data within those conditions. We now want to also exclude clouds that are colder than -38.5 C (where homogeneous freezing takes place) and that are warmer than 0 C, where freezing does not occur. The goal is to focus on cases when aerosols can influence heterogeneous nucleation:

```{r}
conditions <- "ocean==1&seaice>=0.9&merT<=0&merT>=(-38.5)"
eval(parse(t=paste0("la2<-lev",j,"[",conditions,"]")))
```

Clean up the data a bit by changing cloud phase (CP) values to NA if they are undetermined or uncertain, changing the altitude layer to a numeric value, and cleaning up the sea ice data

```{r}
eval(parse(t=paste0("lev",j,"[seaice>1, seaice:=NA]")))
eval(parse(t=paste0("la2<-lev",j)))
eval(parse(t=paste0("rm(lev",j,")")))
la2<-la2[eval(parse(text = conditions))]
```

Add some new variables to the data set. Add, for every observation, which meteorological bin the observation was in, if the air and cloud observation was or was not in background dust conditions, and the glaciation state of any observed cloud:

```{r}
	la2[, a1:=.SD, .SDcols=a1name]  #The value of aerosol tracer of interest in the given ji bin
	la2[,var1bin:=findInterval(eval(parse(t=paste0(var1))),var1range)]
	la2[,var2bin:=findInterval(eval(parse(t=paste0(var2))),var2range)]
	la2[,var3bin:=findInterval(eval(parse(t=paste0(var3))),var3range)]
	la2[,test.this:=as.numeric(!(is.na(conv)))] #is there (1) or is there not (0) any kind of cloud?
	la2[is.na(conv),test.this:=0] # is there (1) or is there not (0) a cloud type of interest?
	la2[,all:=ifelse(!is.na(a1),1,0)] #are there aerosol observations?
	la2[,clean:=ifelse(a1<b1,1,0)] #Are aerosol conditions clean?
	la2[,notclean:=ifelse(a1>=b1,1,0)] #Are aerosol conditions not clean?
	la2[,cleancloud:=ifelse(clean==1&test.this==1,1,0)] #Is the cloud clean?
	la2[,notcleancloud:=ifelse(notclean==1&test.this==1,1,0)] #Is the cloud not clean?
	la2[,fi:=(1 - ((CP-1)/2))*100] 
```

Add some new variables to the data set. These are listed at every observation, but show the sum, sample number, or mean of the variable defined within that observation's meteorological bin and 400 km2 grid cell that the observation falls in. This includes the mean change in each meteorological or aerosol variable, X, between all conditions and those below the dust threshold.

```{r}
	la2[,alln:=sum(all,na.rm=T),by=.(var1bin,var2bin,var3bin,gridcell)] #number of aerosol observations in the ij bin
	la2[,cleann:=sum(clean,na.rm=T),by=.(var1bin,var2bin,var3bin,gridcell)] #number of times aerosol conditons are clean in the ij bin
	la2[,notcleann:=sum(notclean,na.rm=T),by=.(var1bin,var2bin,var3bin,gridcell)] #number of times aerosol conditions are not clean in the ij bin
	la2[,cleanncloud:=sum(cleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin,gridcell)] #number clean clouds in the ij bin
	la2[,notcleanncloud:=sum(notcleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin,gridcell)] #number of not clean clouds in the ij bin
	la2[,uniccf:=length(unique(date[clean==1])), by=.(var1bin,var2bin,var3bin,gridcell)] #unique clean days in each ij bin
	la2[,unic:=length(unique(date[cleancloud==1])),by=.(var1bin,var2bin,var3bin,gridcell)] #unique days with clean clouds in the ij bin
	la2[,uniacf:=length(unique(date[notclean==1])),by=.(var1bin,var2bin,var3bin,gridcell)] #unique non clean days in the ij bin
	la2[,unia:=length(unique(date[notcleancloud==1])),by=.(var1bin,var2bin,var3bin,gridcell)] #unique days with non clean clouds in the ij bin
	la2[,dfi:=mean(fi[test.this==1], na.rm=T)-mean(fi[cleancloud==1], na.rm=T), by=.(var1bin,var2bin,var3bin,gridcell)]# create a variable in la2 "fraction of fully ice-dominated clouds" 
	la2[,nonzeroCP:=length(unique(gridcell[abs(dfi)>0])), by=.(var1bin,var2bin,var3bin)] 
	for(i in 1:length(groups)) {
		eval(parse(t=paste0("la2[,d",groups[i],":=mean(",groups[i],"[test.this==1], na.rm=T)-mean(",groups[i],"[cleancloud==1], na.rm=T), by=.(var1bin,var2bin,var3bin,gridcell)]")))
	} 
```

Then take the subset of data that meets the quality control parameters and find fraction of clouds used for the attribution step::

```{r}
test<-la2[cleanncloud>=min & notcleanncloud>=min&unic>=min4&unia>=min4&nonzeroCP>=minj,]
dim(test[test.this==1])[1]/length(la2$test.this[la2$test.this==1])

```

Find top bins with the most data:

```{r}
pick2<-test[, 
		.(
        alln=sum(all,na.rm=T)
		) ,
		by=.(var1bin,var2bin,var3bin)] 	
pick2<-na.omit(pick2)
pick<- order(pick2$alln, decreasing = TRUE)

```

It was necessary to improve signal-to-noise ratios by grouping the data into 10% quantile bins for the change in glaciation (dfi below) and remove points at quantiles with \< 100 observations.

```{r}
int<-quantile(test$dfi,seq(0.1,1,0.1))  
Nval<-100

ladfi_1<-list()
for(i in 1) {
vb1<-pick2[pick,]$var1bin[i]
vb2<-pick2[pick,]$var2bin[i]
vb3<-pick2[pick,]$var3bin[i]
ladfi_1[[1]]<-test[var1bin==vb1&var2bin==vb2&var3bin==vb3][,.(idfi=mean(dfi,na.rm=T),N=.N),keyby=.(bin=findInterval(dfi, int))][N>Nval,.SD]
}

for(i in 2:length(pick)) {  #For each j bin, starting from most populous
vb1<-pick2[pick,]$var1bin[i]
vb2<-pick2[pick,]$var2bin[i]
vb3<-pick2[pick,]$var3bin[i]
ladfi_1[[i]]<-test[var1bin==vb1&var2bin==vb2&var3bin==vb3][,.(idfi=mean(dfi,na.rm=T),N=.N),keyby=.(bin=findInterval(dfi, int))][N>Nval,.SD]}
ladfi<-rbindlist(ladfi_1, idcol=T)

for(j in 1:length(groups)) {  #For each individual met and aerosol variable
eval(parse(t=paste0("la",groups[j],"_1<-list()")))

for(i in 1) {
vb1<-pick2[pick,]$var1bin[i]
vb2<-pick2[pick,]$var2bin[i]
vb3<-pick2[pick,]$var3bin[i]
eval(parse(t=paste0("la",groups[j],"_1[[1]]<-test[var1bin==vb1&var2bin==vb2&var3bin==vb3][,.(id",groups[j],"=mean(d",groups[j],",na.rm=T),N=.N),keyby=.(bin=findInterval(dfi, int))][N>Nval,.SD]")))
}

for(i in 2:length(pick)) {  #For each j bin, starting from most populous
vb1<-pick2[pick,]$var1bin[i]
vb2<-pick2[pick,]$var2bin[i]
vb3<-pick2[pick,]$var3bin[i]
eval(parse(t=paste0("la",groups[j],"_1[[i]]<-test[var1bin==vb1&var2bin==vb2&var3bin==vb3][,.(id",groups[j],"=mean(d",groups[j],",na.rm=T),N=.N),keyby=.(bin=findInterval(dfi, int))][N>Nval,.SD]")))
}
eval(parse(t=paste0("la",groups[j],"<-rbindlist(la",groups[j],"_1, idcol=T)")))
}

```

Add the resulting data into one data table:

```{r}
tog<-ladfi
for(j in 1:length(groups)) {  
eval(parse(t=paste0("tog$d",groups[j],"<-la",groups[j],"$id",groups[j])))
}
names(tog)[1]<-"jbin"
names(tog)[3]<-"dfi"

```

Save the file needed to plot **Figure 1c**.

```{r}
colnames(tog)[3]<-"dglaciation"
fwrite(tog, file="../../data/derived_data/tog.csv")
```
