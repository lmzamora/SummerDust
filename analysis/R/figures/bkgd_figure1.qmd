---
title: "bkgd_figure1b"
author: "Lauren Zamora"
format: html
editor: visual
---

For **Figure 1b** first load the following libraries:

```{r}
library(data.table)
```

Specify the bin sizes and meteorological parameters to plot by:

```{r}
merTrange<-seq(-70,30,7.5/2)
merQVrange<-seq(0,0.0145, 0.001) 
temprange<-seq(-70,30,7.5/2)

var1range<-merTrange
var2range<-temprange
var3range<-merQVrange
var1<-"merT"
var2<-"temp"
var3<-"merQV"

```

Specify that we are going to use FLEXPART dust as the aerosol type for determining background conditions, and the FLEXPART dust background cutoff in ng/m3:

```{r}
atypes<-c("fdust")
fdustcutoff<- 93 
acutoff<-c(fdustcutoff)
i=1
a1name<-atypes[i]
b1<-acutoff[i]
```

Set the conditions for determining the subset of interest (over ocean, over sea ice), and the altitude in km, j, of the data we want to plot:

```{r}
conditions <- "ocean==1&seaice>=0.9"
j<-3
```

Load the data. Reduce the data to the subset of interest defined above:

```{r}
eval(parse(t=paste0(" load('../../data/derived_data/lev",j,"_v4c.RData')")))
eval(parse(t=paste0("la3<-lev",j,"[",conditions,"]")))
```

Clean up the data a bit by changing cloud phase (CP) values to NA if they are undetermined or uncertain, changing the altitude layer to a numeric value, and cleaning up the sea ice data

```{r}
la3$CP[la3$CP==0]<-NA  #Values are either 1 (ice), 2 (mixed phase), 3 (liquid), or 0 (undetermined). Convert undetermined to NA.
la3$CP[la3$CPqf==1]<-NA #convert CP values that are uncertain to NAs. 
la3$alt_layer<-as.numeric(la3$alt_layer)
la3[seaice>1, seaice:=NA]  #NSIDC sea ice values are from 0 to 1. Higher values indicate quality flags.
```

Specify quality control variables. We focused the analysis on those meteorological bins where there were at least 40 (min) cloud observations in both background and non-background conditions. We also focused on bins where there were at least 5 (min4) unique days of observations to minimize any potential autocorrelation resulting from many observations being taken from the same cloud:

```{r}
min<-40
min4<-5
```

Add some new variables to the dataset. Add, for every observation, which meteorological bin the observation was in, if the air and cloud observation was or was not in background dust conditions, and the glaciation state of any observed cloud:

```{r}
	la3[, a1:=.SD, .SDcols=a1name]  #The value of aerosol tracer of interest in the given meteorological bin
	la3[,var1bin:=findInterval(eval(parse(t=paste0(var1))),var1range)]
	la3[,var2bin:=findInterval(eval(parse(t=paste0(var2))),var2range)]
	la3[,var3bin:=findInterval(eval(parse(t=paste0(var3))),var3range)]
	la3[,test.this:=as.numeric(!(is.na(conv)))] #is there (1) or is there not (0) any kind of cloud?
	la3[,all:=ifelse(!is.na(a1),1,0)]
	la3[,clean:=ifelse(a1<b1,1,0)]
	la3[,notclean:=ifelse(a1>=b1,1,0)]
	la3[,cleancloud:=ifelse(clean==1&test.this==1,1,0)]
	la3[,notcleancloud:=ifelse(notclean==1&test.this==1,1,0)]
	la3[,fi:=(1 - ((CP-1)/2))*100] #glaciation
```

Add some new variables to the dataset. For every observation, add relevant information about the characteristics of the meteorological bin it belonged to:

```{r}
	la3[,alln:=sum(all,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of aerosol observations in the meteorological bin
	la3[,cleann:=sum(clean,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of times aerosol conditons are clean in the meteorological bin
	la3[,notcleann:=sum(notclean,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of times aerosol conditions are not clean in the meteorological bin
	la3[,cleanncloud:=sum(cleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number clean clouds in the meteorological bin
	la3[,notcleanncloud:=sum(notcleancloud,na.rm=T),by=.(var1bin,var2bin,var3bin)] #number of not clean clouds in the meteorological bin
	la3[,uniccf:=length(unique(date[clean==1])), by=.(var1bin,var2bin,var3bin)] #unique clean days in each meteorological bin
	la3[,unic:=length(unique(date[cleancloud==1])),by=.(var1bin,var2bin,var3bin)] #unique days with clean clouds in the meteorological bin
	la3[,uniacf:=length(unique(date[notclean==1])),by=.(var1bin,var2bin,var3bin)] #unique non clean days in the meteorological bin
	la3[,unia:=length(unique(date[notcleancloud==1])),by=.(var1bin,var2bin,var3bin)] #unique days with non clean clouds in the meteorological bin
	la3[,dfi:=mean(fi[test.this==1], na.rm=T)-mean(fi[cleancloud==1], na.rm=T), by=.(var1bin,var2bin,var3bin)]# the glaciation difference between all and background clouds in the meteorological bin 
```

Group mean difference in cloud glaciation (dfi) and thickness (dCth) into meteorological bins and get sample number (alln) within the bins for cases that satisfy the quality control elements . Then fill out the grid, adding NAs to any empty bins for the two variables the plot will be flattened onto. In this case, var1 is MERRA-2 T and var3 is MERRA-2 Qv:

```{r}
del1<-la3[unic>=min4&unia>=min4&cleanncloud>=min & notcleanncloud>=min , 
		.(
		dfi=mean(fi[test.this==1],na.rm=T)-mean(fi[cleancloud==1], na.rm=T),
		dCth=mean(th[test.this==1], na.rm=T)-mean(th[cleancloud==1], na.rm=T),
		alln=sum(test.this,na.rm=T)
		) ,
		by=.(var1bin, var2bin, var3bin)] 	
		
 setDT(del1)
 
del2<-expand.grid(var1bin=min(del1$var1bin,na.rm=T):max(del1$var1bin,na.rm=T),var3bin=min(del1$var3bin,na.rm=T):max(del1$var3bin,na.rm=T),dfi=NA,dCth=NA,alln=NA,var2bin=NA) 
del2<-rbind(del1,del2)
```

Find which of the differences in cloud glaciation in each meteorological bin are significant (p <0.05) using a Wilcoxon rank test. As before, fill out the grid, adding NAs to any empty bins for the two variables the plot will be flattened onto:

```{r}
del1p<-la3[unic>=min4&unia>=min4&cleanncloud>=min & notcleanncloud>=min , 
		.(
		dfip=as.numeric(try(wilcox.test(fi[test.this==1],fi[cleancloud==1])$p.value)),
		dCthp=as.numeric(try(wilcox.test(th[test.this==1], th[cleancloud==1])$p.value))
				) ,
		by=.(var1bin,var3bin)] 
# Add in the missing bins for plotting purposess
del2p<-expand.grid(var1bin=min(del1p$var1bin,na.rm=T):max(del1p$var1bin,na.rm=T),var3bin=min(del1p$var3bin,na.rm=T):max(del1p$var3bin,na.rm=T),dfip=NA,dCthp=NA)
del2p<-rbind(del1p,del2p)
```

Add in the actual values of the bins for reference:

```{r}
del2[,merT:=var1range[var1bin]]
del2[,temp:=var2range[var2bin]]
del2[,merQV:=var3range[var3bin]]

```

Remove rows in the dataset where there are no data for variables 1 and 3 (which are the two variables we will plot the 2-D data on). In this case variable 1 is MERRA-2 temperature, and variable 3 is MERRA-2 specific humidity.

```{r}
del2<-del2[!is.na(del2$var1bin),]
del2<-del2[!is.na(del2$var3bin),]
del2p<-del2p[!is.na(del2p$var1bin),]
del2p<-del2p[!is.na(del2p$var3bin),]

```

Average across all AIRS T bins, so that we have a new 2D dataset for MERRA-2 temperature and Qv bins that includes the weighted mean of the change in glaciation, weighted by sample number in the bin. 

```{r}
test<-del2[, weighted.mean(dfi,alln,na.rm=T), by=.(var1bin,var3bin)][, dcast(.SD, var1bin~var3bin)]    
grid2<-as.matrix(test)[,-1]

testp<-dcast(del2p, var1bin~var3bin,value.var='dfip',fun=mean,na.rm=T,fill=NA) #this will cause trouble if there is more than 1 real value, but there shouldn't be.
grid2p<-as.matrix(testp)[,-1]
```

Get grid point sizes:

```{r}
test3<-dcast(del2, var1bin~var3bin,value.var='alln',fun=sum,fill=NA, na.rm=T) 
gridn<-as.matrix(test3)[,-1]
sizegrid<-gridn/max(gridn,na.rm=T)*4.5
```

Save the files needed to plot **Figure 1b**.

```{r}
save(del2, file="../../data/derived_data/del2.Rdata")
save(grid2, file="../../data/derived_data/grid2.Rdata")
save(grid2p, file="../../data/derived_data/grid2p.Rdata")
save(sizegrid, file="../../data/derived_data/sizegrid.Rdata")
```
